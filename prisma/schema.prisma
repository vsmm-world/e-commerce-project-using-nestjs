// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model admin {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  email           String
  isdeleted       Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  adminCredential adminCredential[]
}

model adminCredential {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  admin     admin     @relation(fields: [adminId], references: [id])
  adminId   String    @db.ObjectId
  token     String?
  expiresAt DateTime?
  password  String
  isdeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model tempotp {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  otp       String
  otpRef    String
  expiresAt DateTime
  tempId    String
  isdeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model customer {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  email              String
  orderHistory       Json[]               @default([])
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  isdeleted          Boolean              @default(false)
  cart               cart[]
  order              order[]
  payment            payment[]
  customerCredential customerCredential[]
  adress             adress[]
}

model customerCredential {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  customer   customer  @relation(fields: [customerId], references: [id])
  customerId String    @db.ObjectId
  token      String?
  expiresAt  DateTime?
  password   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  isdeleted  Boolean   @default(false)
}

model adress {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  customer       customer         @relation(fields: [customerId], references: [id])
  customerId     String           @db.ObjectId
  name           String
  street         String
  city           String
  state          String
  phone          String
  pincode        String
  isDefault      Boolean
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isdeleted      Boolean          @default(false)
  shipmentStatus shipmentStatus[]
}

model product {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  description     String
  category        category          @relation(fields: [categoryId], references: [id])
  categoryId      String            @db.ObjectId
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  cart            cart[]
  isdeleted       Boolean           @default(false)
  product_variant product_variant[]
}

model product_variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   product  @relation(fields: [productId], references: [id])
  productId String   @db.ObjectId
  size      String
  color     String
  stock     Int
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isdeleted Boolean  @default(false)
  cart      cart[]
}

model category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   product[]
  isdeleted Boolean   @default(false)
}

model cart {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  productIds        Json[]
  products          Json[]
  totalItems        Int
  totalPrice        Float
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  customer          customer?        @relation(fields: [customerId], references: [id])
  customerId        String?          @db.ObjectId
  isdeleted         Boolean          @default(false)
  product           product?         @relation(fields: [productId], references: [id])
  productId         String?          @db.ObjectId
  product_variant   product_variant? @relation(fields: [product_variantId], references: [id])
  product_variantId String?          @db.ObjectId
}

model order {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  productIds     Json[]
  products       Json[]
  customer       customer         @relation(fields: [customerId], references: [id])
  customerId     String           @db.ObjectId
  tatalItems     Int
  totalPrice     Float
  payment        payment          @relation(fields: [paymentId], references: [id])
  paymentId      String           @db.ObjectId
  paymentMethod  String
  paymentStatus  String
  orderDate      DateTime         @default(now())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  isdeleted      Boolean          @default(false)
  shipmentStatus shipmentStatus[]
}

model shipmentStatus {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  adress    adress   @relation(fields: [adressId], references: [id])
  adressId  String   @db.ObjectId
  order     order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId
  isdeleted Boolean  @default(false)
}

model payment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  COD        Boolean
  pymentCred String?
  customer   customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  order      order[]
  isdeleted  Boolean  @default(false)
}

model tempResetToken {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  token     String
  expiresAt DateTime
  tempId    String
  isdeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
